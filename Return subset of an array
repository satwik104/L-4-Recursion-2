
//assuming null value as 0 and storing the size of each row (i.e subset) at column 0, 
//so the result starts from column 1 for every row.
int subset(int input[], int n, int output[][20]) {
    //base case
    if(n==0)
    {
     output[0][0]=0;
     return 1;   
    } 
    //recursive call
    int smalloutput = subset(input+1,n-1,output);
    //our part to handel
    //in this question each element of the array have two options...
    //either it comes to the subset or not
    //so we give choices to the first element
    for(int i=0; i<smalloutput; i++)
    {
        //dry run the following code keeping in mid the solution givin by recursion...
        //must use diagram of output till now on paper
        int array_size = output[i][0]+1;
        output[i+smalloutput][0] = array_size;
        output[i+smalloutput][1] = input[0];
        for(int j=2;j<array_size+1;j++)
            output[i+smalloutput][j] = output[i][j-1]; 
    }
    return 2*smalloutput;
}
